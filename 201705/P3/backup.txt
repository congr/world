import java.io.File;
import java.io.FileWriter;
import java.util.*;

/**
 * Created by cutececil on 2017. 5. 19..
 */
// 막대기
public class P3_RomeYang {

    static final int[] VALUES = /*{10, 9, 5, 4, 1};//*/{1, 4, 5, 9, 10}; // N
    static final int[] WEIGHTS = /*{2, 3, 2, 3, 1};//*/{1, 3, 2, 3, 2}; // K
    static int KofN[] = new int[]{0, 1, 0, 0, 3, 2, 0, 0, 0, 3, 2};

    static boolean debug = false;
    static boolean found;
    static final int MAX_VALUE = 10001;

    public static void main(String[] args) throws Exception {
        String inFilename = (args != null && args.length > 0) ? args[0] : "201705/P3/Set2.in"; // path from root
        File inFile = new File(inFilename);
        File outFile = new File(inFilename.replace("in", "out"));
        FileWriter wr = new FileWriter(outFile);
        Scanner sc = new Scanner(System.in);
        if (inFile.exists()) sc = new Scanner(inFile);


        int[][] D = new int[MAX_VALUE + 1][MAX_VALUE + 1];
        precalc(MAX_VALUE, MAX_VALUE, D);

        if (debug)
            for (int i = 0; i < MAX_VALUE; i++) {
                System.out.print(i + "| ");
                for (int j = 0; j < MAX_VALUE; j++) {
                    System.out.print(D[i][j] + " ");
                }
                System.out.println();
            }

        // logic starts here
        int T = sc.nextInt();
        while (T-- > 0) {
            int N = sc.nextInt();
            int K = sc.nextInt();

            if (debug) System.out.println("==[N, K] " + N + " " + K);
            if (debug) System.out.println("D => " + D[N][K]);

            //List<Integer> coins = new LinkedList<>();
            //found = false;
            //Arrays.fill(dp, -1);
            //
            //if (N == K) found = true;
            //else {
            //    for (int i = 0; i < 5; i++) {
            //        if (N % VALUES[i] == K % WEIGHTS[i] && N / VALUES[i] == K / WEIGHTS[i]) {
            //            found = true;
            //            if (debug) System.out.println("N K " + N + " " + K + " found %");
            //        }
            //    }
            //    change(N, coins, 0, K, 0);
            //}

            String result = D[N][K] > 0 ? "O" : "X";
            //String result = "X";
            //if (found) result = "O";

            System.out.println(result);
            wr.write(result + "\n");
        }

        sc.close();
        wr.close();
    }

    static int dp[] = new int[10000001];

    private static int change(int remaining, List<Integer> coins, int pos, int K, int total) {
        if (debug) System.out.println("pos " + pos + " K " + K);
        if (found) return dp[pos];
        if (remaining == 0) {
            int cnt = 0;
            for (int i = 0; i < coins.size(); i++) {
                cnt += KofN[coins.get(i)];
            }
            if (debug) System.out.println(coins + " total " + total);
            if (total/*cnt*/ == K) {
                if (debug) System.out.println("found");
                found = true;
                return K;
            }
            return dp[pos];
        } else {
            if (dp[pos] != -1) {
                return dp[pos];
            }

            if (found)
                return dp[pos];
            if (remaining >= VALUES[pos]) {

                coins.add(VALUES[pos]);
                total += WEIGHTS[pos];
                dp[pos] = change(remaining - VALUES[pos], coins, pos, K, total);
                total -= WEIGHTS[pos];
                coins.remove(coins.size() - 1);
            }

            if (pos + 1 < VALUES.length) {
                dp[pos] = change(remaining, coins, pos + 1, K, total);
            }
        }
        return dp[pos];
    }

    public static int coinChange(int[] coins, int amount, List<Integer> selected, int K, int sum) {
        if (amount < 1) return 0;
        return coinChange(coins, amount, new int[amount], selected, K, sum);
    }

    //static int sumk;

    private static int coinChange(int[] coins, int rem, int[] count, List<Integer> selected, int K, int sumk) {
        if (rem < 0) return -1;
        if (rem == 0) {
            if (debug) System.out.println("sumk " + sumk);
            if (sumk == K) {
                found = true;
                if (debug) System.out.println("found");
            }

            return 0;
        }
        if (count[rem - 1] != 0) return count[rem - 1];
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < coins.length; i++) {
            sumk += WEIGHTS[i];
            //selected.add(VALUES[i]);
            int res = coinChange(coins, rem - coins[i], count, selected, K, sumk);
            sumk -= WEIGHTS[i];
            //selected.remove(selected.size() - 1);
            if (res >= 0 && res < min)
                min = 1 + res;
        }
        //for (int coin : coins) {
        //    int res = coinChange(coins, rem - coin, count);
        //    if (res >= 0 && res < min)
        //        min = 1 + res;
        //}
        count[rem - 1] = (min == Integer.MAX_VALUE) ? -1 : min;
        //System.out.println(Arrays.toString(count));
        return count[rem - 1];
    }

    public static int minimumCoin(int[] combinations, int x) {
        int[] memory = new int[x + 1];
        for (int i = 0; i < memory.length; i++) {
            memory[i] = Integer.MIN_VALUE;
        }
        minimumCoin(combinations, x, memory);
        return memory[x];
    }

    private static void minimumCoin(int[] combinations, int x, int[] memory) {
        //if (debug) System.out.println("x " + x + " memory " + Arrays.toString(memory));
        if (x == 0) {
            memory[0] = 0;
            return;
        }

        if (x == 1) {
            memory[1] = 1;
            return;
        }

        List<Integer> costs = new LinkedList<Integer>();

        for (int combination : combinations) {
            if (x - combination >= 0) {
                if (memory[x - combination] == Integer.MIN_VALUE) {
                    minimumCoin(combinations, x - combination, memory);
                }
                costs.add(memory[x - combination] + 1);
                //if (debug) System.out.println(Arrays.toString(memory));
                if (debug) System.out.println(costs);
            }

        }

        memory[x] = Collections.min(costs).intValue();
    }

    // A utility function that returns maximum of two integers
    static int max(int a, int b) {
        return (a > b) ? a : b;
    }

    // Returns the maximum value that can be put in a knapsack of capacity W
    static int knapSack(int W, int wt[], int val[], int n) {
        int i, w;
        int DP[][][] = new int[n + 1][W + 1][100];

        // Build table K[][] in bottom up manner
        for (i = 0; i <= n; i++) {
            for (w = 0; w <= W; w++) {
                if (i == 0 || w == 0)
                    DP[i][w][0] = 0;
                else if (wt[i - 1] <= w) {
                    if (val[i - 1] + DP[i - 1][w - wt[i - 1]][0] > DP[i - 1][w][0])
                        System.out.println(wt[i - 1]);
                    //K[i][w][x++] = wt[i - 1];
                    DP[i][w][0] = max(val[i - 1] + DP[i - 1][w - wt[i - 1]][0], DP[i - 1][w][0]);
                } else
                    DP[i][w] = DP[i - 1][w];


            }
        }

        return DP[n][W][0];
    }

    //static int last(int W, int N, int Ktarget) {
    //    int[] D = new int[10001]; // 다이나믹 배열
    //
    //    // 최대값으로 갱신
    //    for (int i = 0; i <= W; i++) {
    //        D[i] = 987654321;
    //    }
    //
    //    // 0번째 동전은 0으로 초기화
    //    D[0] = 0;
    //
    //    // i는 동전종류
    //    for (int i = 1; i <= N; i++) {
    //
    //    }
    //
    //    System.out.println(Arrays.toString(D));
    //    return D[N][W];
    //}

    static void precalc(int N, int K, int[][] D) {
        //final int[] VALUES = {1, 4, 5, 9, 10}; // N
        //final int[] WEIGHTS = {1, 3, 2, 3, 2}; // K

        for (int i = 1; i < N; i++) {
            D[i][i] = 1;
        }
        //for (int i = 0; i < 5; i++) {
        //    D[VALUES[i]][WEIGHTS[i]] = 1;
        //}

        D[4][3] = 1;
        D[5][2] = 1;
        D[5][4] = 1;
        D[6][3] = 1;
        D[6][5] = 1;
        D[7][4] = 1;
        D[7][6] = 1;
        D[8][5] = 1;
        D[8][6] = 1;
        D[8][7] = 1;
        D[9][3] = 1;
        D[9][5] = 1;
        D[9][6] = 1;
        D[9][7] = 1;
        D[9][8] = 1;
        D[10][2] = 1;
        D[10][4] = 1;
        D[10][6] = 1;
        D[10][7] = 1;
        D[10][8] = 1;
        D[10][9] = 1;

        for (int i = 11; i < N; i++) {
            for (int j = 4; j < K; j++) {

                //D[i][j] = D[i - 1][j - 1] + D[i - 4][j - 3] + D[i - 5][j - 2] + D[i - 9][j - 3] + D[i - 10][j - 2];
                if (D[i][j] == 0)
                    D[i][j] += D[i - 1][j - 1];
                if (D[i][j] == 0)
                    D[i][j] += D[i - 4][j - 3];
                if (D[i][j] == 0)
                    D[i][j] += D[i - 5][j - 2];
                if (D[i][j] == 0)
                    D[i][j] += D[i - 9][j - 3];
                if (D[i][j] == 0)
                    D[i][j] += D[i - 10][j - 2];
            }
        }
    }
}
